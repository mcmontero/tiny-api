#!/usr/bin/php
<?php

// +------------------------------------------------------------+
// | INCLUDES                                                   |
// +------------------------------------------------------------+

require_once 'base/services/cli.php';

// +------------------------------------------------------------+
// | INSTRUCTIONS                                               |
// +------------------------------------------------------------+

tiny_api_cli_main(
    tiny_Api_Cli_Conf::make()
        ->add_description('Executes all unit tests found in any path specified '
                          . 'in the PHP include path.'),
    'main');

// +------------------------------------------------------------+
// | PUBLIC FUNCTIONS                                           |
// +------------------------------------------------------------+

function main(tiny_api_Cli $cli)
{
    $cli->header('Unit Tests');

    $include_path         = explode(':', ini_get('include_path'));
    $total_run_time_start = microtime(true);
    $num_total_tests      = 0;
    foreach ($include_path as $path)
    {
        exec("/usr/bin/find $path/ -name \"*.php\" | /bin/grep \"/tests/\"",
             $files, $retval);

        foreach ($files as $file)
        {
            $cli->notice($file);

            $file_run_time_start = microtime(true);
            $num_file_tests      = 0;
            $output              = null;

            exec("/usr/bin/phpunit --tap --stop-on-failure $file 2>&1",
                 $output, $retval);
            if ($retval)
            {
                if (!_uall_pretty_print_string_equality_failures($cli, $output))
                {
                    print_r($output);
                }

                exit(1);
            }
            $file_run_time_stop = microtime(true);

            $num_output = count($output);
            for ($i = 1; $i < $num_output; $i++)
            {
                if (!preg_match('/^(\d+)\.\.(\d+)$/', $output[ $i ], $matches))
                {
                    print "  " . $output[ $i ] . "\n";
                }
                else
                {
                    $num_total_tests += $matches[ 2 ];
                    $num_file_tests  += $matches[ 2 ];
                }
            }

            print '  num tests: '
                  . number_format($num_file_tests)
                  . ' | '
                  . 'elapsed: '
                  . ($file_run_time_stop - $file_run_time_start)
                  . "\n\n";
        }

        // Make sure the next execution of the find command starts with an
        // empty array of files.
        $files = null;
    }

    $cli->notice('  Total number of tests executed: '
                 . number_format($num_total_tests));
    $cli->notice('Total elapsed time for all tests: '
                . (microtime(true) - $total_run_time_start));
}

// +------------------------------------------------------------+
// | PRIVATE FUNCTIONS                                          |
// +------------------------------------------------------------+

function _uall_pretty_print_string_equality_failures(tiny_api_Cli $cli, $output)
{
    foreach ($output as $index => $line)
    {
        if (preg_match('/Failed asserting that two strings are equal/', $line))
        {
            $failed_unit_test = $output[ $index - 2 ];

            $got =
                explode(
                    "\n",
                    preg_replace(
                        '/\'|"$/msi', '',
                        preg_replace(
                            '/^[ ]+got: [\'|"]?/', '',
                            preg_replace(
                                '/\\\n/', "\n",
                                $output[ $index + 3 ]))));
            $expected =
                explode(
                    "\n",
                    preg_replace(
                        '/\'|"$/msi', '',
                        preg_replace(
                            '/^[ ]+expected: [\'|"]?/', '',
                            preg_replace(
                                '/\\\n/', "\n",
                                $output[ $index + 4 ]))));

            // Why is this code here?  It's possible that either got or
            // expected has more lines than the other.  In that case, we want
            // to drive the comparison why whichever one has more lines.
            $source = $expected;
            $target = $got;
            if (count($got) > count($expected))
            {
                $source = $got;
                $target = $expected;
            }

            print "  $failed_unit_test\n\n";
            print "    message: 'Failed asserting that two strings are "
                  . "equal.'\n";
            print "    severity: fail\n\n";

            foreach ($source as $index => $line)
            {
                if (!array_key_exists($index, $target))
                {
                    $cli->notice("!=  $line\n        line did not exist", 1);
                }
                else if ($line == $target[ $index ])
                {
                    $cli->notice("==  $line\n        " . $target[ $index ], 1);
                }
                else
                {
                    $cli->notice("!=  $line\n        " . $target[ $index ], 1);
                }
            }

            return true;
        }
    }

    return false;
}
?>
